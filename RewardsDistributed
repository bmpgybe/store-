// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract EnhancedCrowdfundingETH {
    address public owner;
    uint256 public goal;
    uint256 public deadline;
    mapping(address => uint256) public contributions;
    uint256 public totalContributions;
    bool public isLocked;

    event FundingReceived(address indexed contributor, uint256 amount);
    event ProjectFunded(uint256 totalAmount);
    event RewardsDistributed(address indexed contributor, uint256 amount);

    modifier onlyOwner() {
        require(msg.sender == owner, "Only the owner can call this function");
        _;
    }

    modifier notLocked() {
        require(!isLocked, "Contract is locked and data cannot be modified");
        _;
    }

    constructor(uint256 _goal, uint256 durationDays) {
        owner = msg.sender;
        goal = _goal;
        deadline = block.timestamp + durationDays * 1 days;
        isLocked = false;
    }

    function contribute() external payable notLocked {
        require(block.timestamp < deadline, "Crowdfunding has ended");
        require(msg.value > 0, "Contribution amount must be greater than 0");

        contributions[msg.sender] += msg.value;
        totalContributions += msg.value;

        emit FundingReceived(msg.sender, msg.value);

        if (totalContributions >= goal) {
            emit ProjectFunded(totalContributions);
        }
    }

    function distributeRewards() external onlyOwner notLocked {
        require(block.timestamp >= deadline, "Crowdfunding deadline not reached yet");
        require(totalContributions >= goal, "Funding goal not reached");

        for (uint256 i = 0; i < msg.sender.balance; i++) {
            address contributor = address(uint160(uint256(msg.sender) + i));
            uint256 contributionAmount = contributions[contributor];
            if (contributionAmount > 0) {
                uint256 rewardAmount = (contributionAmount * 10) / 100; // 10% reward
                payable(contributor).transfer(rewardAmount);
                emit RewardsDistributed(contributor, rewardAmount);
            }
        }
    }

    function lockContract() external onlyOwner {
        isLocked = true;
    }

    function unlockContract() external onlyOwner {
        isLocked = false;
    }
}
