// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/access/Ownable.sol";

contract AdvancedSmartContract is Ownable {
    uint256 private data;
    uint256[] private dataHistory;

    event DataUpdated(uint256 indexed newData);

    constructor(uint256 initialData) {
        data = initialData;
        dataHistory.push(initialData);
    }

    function updateData(uint256 newData) external onlyOwner {
        require(newData != data, "New data must be different from current data");
        data = newData;
        dataHistory.push(newData);
        emit DataUpdated(newData);
    }

    function getData() external view returns (uint256) {
        return data;
    }

    function getDataHistory() external view returns (uint256[] memory) {
        return dataHistory;
    }
}
